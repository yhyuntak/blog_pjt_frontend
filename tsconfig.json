{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext", // 최신 JavaScript 표준으로, 브라우저와 모듈 번들러(Vite 등)에서 주로 사용됌
    "lib": ["DOM", "DOM.Iterable", "ESNext"], // JS 코드 최신 기능들 혹은 기존 JS 표준 라이브러리들을 TS 에서 사용할 수 있도록 함.
    "allowJs": false, // JS 파일도 함께 컴파일할 일이 있으면 true로
    "skipLibCheck": true, // 외부 라이브러리들의 타입 정의 파일들을 체크하지 않음(true)
    "esModuleInterop": true, // CommonJS 를 ES6 모듈처럼 import할 수 있게 해줌.
    "allowSyntheticDefaultImports": true, // 잘은 모르겠지만, 이게 있어야 CommonJS를 ES6 모듈처럼 유연하게 사용 가능
    "strict": true, // any 타입 일체 허용 안함.. 그외 다른 옵션들도 있음
    "forceConsistentCasingInFileNames": true, // true일 시, 파일의 이름의 대소문자를 확실히 구분
    "noEmit": true, // 컴파일 결과물 생성을 막음. vite와 같은 빌드 도구와 쓸 때 유용함.
    "jsx": "react-jsx", // React 17 이상의 새로운 JSX 변환 방식을 사용하여 JSX 코드를 변환함.
    // 17 이상의 방식을 사용하면, React를 명시적으로 import할 필요 없이 JSX를 쓸 수 있다.

    // baseUrl과 paths는 vite와 같은 빌드 도구에서도 동일하게 설정해줘야 한다!! 그래야 타입스크립트와 일관되게 작동함.
    "baseUrl": "./", // ./로 설정하면 프로젝트 루트를 기준으로 "절대 경로 또는 아래의 별칭"을 이용하여 경로 설정 가능
    "paths": {
      "@/*": ["src/*"] // @/**/* 처럼 사용하면 위 baseUrl로 루트를 프로젝트의 루트로 지정했기에, src/**/* 처럼 쓰는 것임.
    }
  },
  "include": ["src"], // include는 Typescript 컴파일러가 포함할 파일 또는 디렉터리를 지정한다.
  "exclude": ["node_modules"], // excludes는 tsc가 제외할 파일 또는 디렉터리를 지정한다.
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
